function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function _ts_generator(thisArg, body) {
    var f, y, t, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(g && (g = 0, op[0] && (_ = 0)), _)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
import { createRelease } from "@solana-mobile/dapp-store-publishing-tools";
import { Connection, Keypair, PublicKey } from "@solana/web3.js";
import fs from "fs";
import { createHash } from "crypto";
import { Constants, getMetaplexInstance } from "../../CliUtils.js";
import { loadPublishDetailsWithChecks, writeToPublishDetails } from "../../config/PublishDetails.js";
import { sendAndConfirmTransaction } from "../utils.js";
var createReleaseNft = function(param) {
    var appMintAddress = param.appMintAddress, releaseDetails = param.releaseDetails, appDetails = param.appDetails, publisherDetails = param.publisherDetails, connection = param.connection, publisher = param.publisher, storageParams = param.storageParams, priorityFeeLamports = param.priorityFeeLamports;
    return _async_to_generator(function() {
        var releaseMintAddress, metaplex, txBuilder, response;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    console.info("Creating Release NFT");
                    releaseMintAddress = Keypair.generate();
                    metaplex = getMetaplexInstance(connection, publisher, storageParams);
                    return [
                        4,
                        createRelease({
                            appMintAddress: new PublicKey(appMintAddress),
                            releaseMintAddress: releaseMintAddress,
                            releaseDetails: releaseDetails,
                            appDetails: appDetails,
                            publisherDetails: publisherDetails,
                            priorityFeeLamports: priorityFeeLamports
                        }, {
                            metaplex: metaplex,
                            publisher: publisher
                        })
                    ];
                case 1:
                    txBuilder = _state.sent().txBuilder;
                    console.info("Release NFT data upload complete\nSigning transaction now");
                    return [
                        4,
                        sendAndConfirmTransaction(metaplex, txBuilder)
                    ];
                case 2:
                    response = _state.sent().response;
                    return [
                        2,
                        {
                            releaseAddress: releaseMintAddress.publicKey.toBase58(),
                            transactionSignature: response.signature
                        }
                    ];
            }
        });
    })();
};
export var createReleaseCommand = function(param) {
    var appMintAddress = param.appMintAddress, buildToolsPath = param.buildToolsPath, signer = param.signer, url = param.url, _param_dryRun = param.dryRun, dryRun = _param_dryRun === void 0 ? false : _param_dryRun, storageParams = param.storageParams, _param_priorityFeeLamports = param.priorityFeeLamports, priorityFeeLamports = _param_priorityFeeLamports === void 0 ? Constants.DEFAULT_PRIORITY_FEE : _param_priorityFeeLamports;
    return _async_to_generator(function() {
        var connection, config, apkEntry, mediaBuffer, hash, _config_app_address, _ref, releaseAddress, transactionSignature;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    connection = new Connection(url, {
                        commitment: "confirmed"
                    });
                    return [
                        4,
                        loadPublishDetailsWithChecks(buildToolsPath)
                    ];
                case 1:
                    config = _state.sent();
                    apkEntry = config.release.files.find(function(asset) {
                        return asset.purpose === "install";
                    });
                    return [
                        4,
                        fs.promises.readFile(apkEntry.uri)
                    ];
                case 2:
                    mediaBuffer = _state.sent();
                    hash = createHash("sha256").update(mediaBuffer).digest("base64");
                    if (config.lastSubmittedVersionOnChain != null && hash === config.lastSubmittedVersionOnChain.apk_hash) {
                        throw new Error("The last created release used the same apk file.");
                    }
                    if (config.lastSubmittedVersionOnChain != null && config.release.android_details.version_code <= config.lastSubmittedVersionOnChain.version_code) {
                        throw new Error("Each release NFT should have higher version code than previous minted release NFT.\nLast released version code is ".concat(config.lastSubmittedVersionOnChain.version_code, ".\nCurrent version code from apk file is ").concat(config.release.android_details.version_code));
                    }
                    if (config.app.android_package != config.release.android_details.android_package) {
                        throw new Error("App package name and release package name do not match.\nApp release specifies " + config.app.android_package + " while release specifies " + config.release.android_details.android_package);
                    }
                    if (!!dryRun) return [
                        3,
                        5
                    ];
                    return [
                        4,
                        createReleaseNft({
                            appMintAddress: (_config_app_address = config.app.address) !== null && _config_app_address !== void 0 ? _config_app_address : appMintAddress,
                            connection: connection,
                            publisher: signer,
                            releaseDetails: _object_spread({}, config.release),
                            appDetails: config.app,
                            publisherDetails: config.publisher,
                            storageParams: storageParams,
                            priorityFeeLamports: priorityFeeLamports
                        })
                    ];
                case 3:
                    _ref = _state.sent(), releaseAddress = _ref.releaseAddress, transactionSignature = _ref.transactionSignature;
                    return [
                        4,
                        writeToPublishDetails({
                            release: {
                                address: releaseAddress
                            },
                            lastSubmittedVersionOnChain: {
                                address: releaseAddress,
                                version_code: config.release.android_details.version_code,
                                apk_hash: hash
                            }
                        })
                    ];
                case 4:
                    _state.sent();
                    return [
                        2,
                        {
                            releaseAddress: releaseAddress,
                            transactionSignature: transactionSignature
                        }
                    ];
                case 5:
                    return [
                        2
                    ];
            }
        });
    })();
};
