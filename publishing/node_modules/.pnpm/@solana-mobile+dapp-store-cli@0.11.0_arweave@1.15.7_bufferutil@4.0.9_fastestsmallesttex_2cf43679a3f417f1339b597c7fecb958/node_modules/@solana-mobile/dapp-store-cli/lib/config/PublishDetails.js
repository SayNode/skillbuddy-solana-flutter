function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function _ts_generator(thisArg, body) {
    var f, y, t, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(g && (g = 0, op[0] && (_ = 0)), _)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
import { dump, load } from "js-yaml";
import Ajv from "ajv";
// eslint-disable-next-line require-extensions/require-extensions
import { readFile } from 'fs/promises';
var schemaJson = JSON.parse((await readFile(new URL("../generated/config_schema.json", import.meta.url))).toString());
import fs from "fs";
import path from "path";
import { toMetaplexFile } from "@metaplex-foundation/js";
import { Constants, showMessage } from "../CliUtils.js";
import util from "util";
import { imageSize } from "image-size";
import { exec } from "child_process";
import getVideoDimensions from "get-video-dimensions";
import { PublicKey } from "@solana/web3.js";
var runImgSize = util.promisify(imageSize);
var runExec = util.promisify(exec);
var AaptPrefixes = {
    quoteRegex: "'(.*?)'",
    quoteNonLazyRegex: "'(.*)'",
    packagePrefix: "package: name=",
    verCodePrefix: "versionCode=",
    verNamePrefix: "versionName=",
    sdkPrefix: "(?:minSdk|sdk)Version:",
    debuggableApkPrefix: "application-debuggable",
    localePrefix: "locales: "
};
var ajv = new Ajv({
    strictTuples: false
});
var validate = ajv.compile(schemaJson);
export var loadPublishDetails = function(configPath) {
    return _async_to_generator(function() {
        var configFile, valid;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        fs.promises.readFile(configPath, "utf-8")
                    ];
                case 1:
                    configFile = _state.sent();
                    valid = validate(load(configFile));
                    if (!valid) {
                        console.error(validate.errors);
                        process.exit(1);
                    }
                    return [
                        2,
                        load(configFile)
                    ];
            }
        });
    })();
};
export var loadPublishDetailsWithChecks = function() {
    var buildToolsDir = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
    return _async_to_generator(function() {
        var _config_app_media_find, _config_app_media, _config_release_media_find, _config_release_media, _config_release_media_find1, _config_release_media1, _config_release_media_find2, _config_release_media2, _config_release_media3, _config_release_media4, config, apkEntry, apkPath, _, appIcon, iconPath, iconBuffer, releaseIcon, iconPath1, banner, bannerPath, featureGraphic, featureGraphicPath, screenshots, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, item, mediaPath, err, videos, _iteratorNormalCompletion1, _didIteratorError1, _iteratorError1, _iterator1, _step1, video, mediaPath1, err, googlePkg, pkgCompare, alpha_testers, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, wallet;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        loadPublishDetails(Constants.getConfigFilePath())
                    ];
                case 1:
                    config = _state.sent();
                    // We validate that the config is going to have at least one installable asset
                    apkEntry = config.release.files.find(function(asset) {
                        return asset.purpose === "install";
                    });
                    apkPath = path.join(process.cwd(), apkEntry === null || apkEntry === void 0 ? void 0 : apkEntry.uri);
                    if (!fs.existsSync(apkPath)) {
                        throw new Error("Invalid path to APK file.");
                    }
                    if (!buildToolsDir) return [
                        3,
                        3
                    ];
                    _ = config.release;
                    return [
                        4,
                        getAndroidDetails(buildToolsDir, apkPath)
                    ];
                case 2:
                    _.android_details = _state.sent();
                    _state.label = 3;
                case 3:
                    appIcon = (_config_app_media = config.app.media) === null || _config_app_media === void 0 ? void 0 : (_config_app_media_find = _config_app_media.find(function(asset) {
                        return asset.purpose === "icon";
                    })) === null || _config_app_media_find === void 0 ? void 0 : _config_app_media_find.uri;
                    if (!appIcon) return [
                        3,
                        6
                    ];
                    iconPath = path.join(process.cwd(), appIcon);
                    return [
                        4,
                        checkIconCompatibility(iconPath, "App")
                    ];
                case 4:
                    _state.sent();
                    return [
                        4,
                        fs.promises.readFile(iconPath)
                    ];
                case 5:
                    iconBuffer = _state.sent();
                    config.app.icon = toMetaplexFile(iconBuffer, appIcon);
                    _state.label = 6;
                case 6:
                    releaseIcon = (_config_release_media = config.release.media) === null || _config_release_media === void 0 ? void 0 : (_config_release_media_find = _config_release_media.find(function(asset) {
                        return asset.purpose === "icon";
                    })) === null || _config_release_media_find === void 0 ? void 0 : _config_release_media_find.uri;
                    if (!releaseIcon) return [
                        3,
                        8
                    ];
                    iconPath1 = path.join(process.cwd(), releaseIcon);
                    return [
                        4,
                        checkIconCompatibility(iconPath1, "Release")
                    ];
                case 7:
                    _state.sent();
                    _state.label = 8;
                case 8:
                    if (!appIcon && !releaseIcon) {
                        throw new Error("Please specify at least one media entry of type icon in your configuration file");
                    }
                    banner = (_config_release_media1 = config.release.media) === null || _config_release_media1 === void 0 ? void 0 : (_config_release_media_find1 = _config_release_media1.find(function(asset) {
                        return asset.purpose === "banner";
                    })) === null || _config_release_media_find1 === void 0 ? void 0 : _config_release_media_find1.uri;
                    if (!banner) return [
                        3,
                        10
                    ];
                    bannerPath = path.join(process.cwd(), banner);
                    return [
                        4,
                        checkBannerCompatibility(bannerPath)
                    ];
                case 9:
                    _state.sent();
                    return [
                        3,
                        11
                    ];
                case 10:
                    throw new Error("Please specify banner image of size 1200x600 in your configuration file");
                case 11:
                    featureGraphic = (_config_release_media2 = config.release.media) === null || _config_release_media2 === void 0 ? void 0 : (_config_release_media_find2 = _config_release_media2.find(function(asset) {
                        return asset.purpose === "featureGraphic";
                    })) === null || _config_release_media_find2 === void 0 ? void 0 : _config_release_media_find2.uri;
                    if (!featureGraphic) return [
                        3,
                        13
                    ];
                    featureGraphicPath = path.join(process.cwd(), featureGraphic);
                    return [
                        4,
                        checkFeatureGraphicCompatibility(featureGraphicPath)
                    ];
                case 12:
                    _state.sent();
                    _state.label = 13;
                case 13:
                    config.release.media.forEach(function(item) {
                        var mediaPath = path.join(process.cwd(), item.uri);
                        if (!fs.existsSync(mediaPath)) {
                            throw new Error("File doesnt exist: ".concat(item.uri, "."));
                        }
                        if (item.purpose == "screenshot" && !checkImageExtension(mediaPath)) {
                            throw new Error("Please ensure the file ".concat(item.uri, " is a jpeg, png, or webp file."));
                        }
                        if (item.purpose == "video" && !checkVideoExtension(mediaPath)) {
                            throw new Error("Please ensure the file ".concat(item.uri, " is a mp4."));
                        }
                    });
                    screenshots = (_config_release_media3 = config.release.media) === null || _config_release_media3 === void 0 ? void 0 : _config_release_media3.filter(function(asset) {
                        return asset.purpose === "screenshot";
                    });
                    _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    _state.label = 14;
                case 14:
                    _state.trys.push([
                        14,
                        19,
                        20,
                        21
                    ]);
                    _iterator = screenshots[Symbol.iterator]();
                    _state.label = 15;
                case 15:
                    if (!!(_iteratorNormalCompletion = (_step = _iterator.next()).done)) return [
                        3,
                        18
                    ];
                    item = _step.value;
                    mediaPath = path.join(process.cwd(), item.uri);
                    return [
                        4,
                        checkScreenshotDimensions(mediaPath)
                    ];
                case 16:
                    if (_state.sent()) {
                        throw new Error("Screenshot ".concat(mediaPath, " must be at least 1080px in width and height."));
                    }
                    _state.label = 17;
                case 17:
                    _iteratorNormalCompletion = true;
                    return [
                        3,
                        15
                    ];
                case 18:
                    return [
                        3,
                        21
                    ];
                case 19:
                    err = _state.sent();
                    _didIteratorError = true;
                    _iteratorError = err;
                    return [
                        3,
                        21
                    ];
                case 20:
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                    return [
                        7
                    ];
                case 21:
                    videos = (_config_release_media4 = config.release.media) === null || _config_release_media4 === void 0 ? void 0 : _config_release_media4.filter(function(asset) {
                        return asset.purpose === "video";
                    });
                    _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                    _state.label = 22;
                case 22:
                    _state.trys.push([
                        22,
                        27,
                        28,
                        29
                    ]);
                    _iterator1 = videos[Symbol.iterator]();
                    _state.label = 23;
                case 23:
                    if (!!(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done)) return [
                        3,
                        26
                    ];
                    video = _step1.value;
                    mediaPath1 = path.join(process.cwd(), video.uri);
                    return [
                        4,
                        checkVideoDimensions(mediaPath1)
                    ];
                case 24:
                    if (_state.sent()) {
                        throw new Error("Video ".concat(mediaPath1, " must be at least 720px in width and height."));
                    }
                    _state.label = 25;
                case 25:
                    _iteratorNormalCompletion1 = true;
                    return [
                        3,
                        23
                    ];
                case 26:
                    return [
                        3,
                        29
                    ];
                case 27:
                    err = _state.sent();
                    _didIteratorError1 = true;
                    _iteratorError1 = err;
                    return [
                        3,
                        29
                    ];
                case 28:
                    try {
                        if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                            _iterator1.return();
                        }
                    } finally{
                        if (_didIteratorError1) {
                            throw _iteratorError1;
                        }
                    }
                    return [
                        7
                    ];
                case 29:
                    if (screenshots.length + videos.length < 4) {
                        throw new Error("At least 4 screenshots or videos are required for publishing a new release. Found only ".concat(screenshots.length + videos.length));
                    }
                    validateLocalizableResources(config);
                    googlePkg = config.solana_mobile_dapp_publisher_portal.google_store_package;
                    if (googlePkg === null || googlePkg === void 0 ? void 0 : googlePkg.length) {
                        pkgCompare = new RegExp("[a-zA-Z0-9_]+(\\.[a-zA-Z0-9_]+)+").exec(googlePkg);
                        if (!(pkgCompare === null || pkgCompare === void 0 ? void 0 : pkgCompare.length)) {
                            throw new Error("Please provide a valid Google store package name in the Publisher Portal section of your configuration file.");
                        }
                    }
                    alpha_testers = config.solana_mobile_dapp_publisher_portal.alpha_testers;
                    if (alpha_testers !== undefined) {
                        _iteratorNormalCompletion2 = true, _didIteratorError2 = false, _iteratorError2 = undefined;
                        try {
                            for(_iterator2 = alpha_testers[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true){
                                wallet = _step2.value;
                                try {
                                    void new PublicKey(wallet.address);
                                } catch (e) {
                                    throw new Error("invalid alpha tester wallet address <".concat(wallet, ">"));
                                }
                            }
                        } catch (err) {
                            _didIteratorError2 = true;
                            _iteratorError2 = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                                    _iterator2.return();
                                }
                            } finally{
                                if (_didIteratorError2) {
                                    throw _iteratorError2;
                                }
                            }
                        }
                        if (alpha_testers.size > 10) {
                            throw new Error("Alpha testers are limited to 10 per app submission");
                        }
                    }
                    return [
                        2,
                        config
                    ];
            }
        });
    })();
};
var checkIconCompatibility = function(path, typeString) {
    return _async_to_generator(function() {
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    if (!fs.existsSync(path) || !checkImageExtension(path)) {
                        throw new Error("Please check the path to your ".concat(typeString, " icon and ensure the file is a jpeg, png, or webp file."));
                    }
                    return [
                        4,
                        checkIconDimensions(path)
                    ];
                case 1:
                    if (_state.sent()) {
                        throw new Error("Icons must be 512px by 512px.");
                    }
                    return [
                        2
                    ];
            }
        });
    })();
};
var checkBannerCompatibility = function(path) {
    return _async_to_generator(function() {
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    if (!fs.existsSync(path) || !checkImageExtension(path)) {
                        throw new Error("Please check the path to your banner image and ensure the file is a jpeg, png, or webp file.");
                    }
                    return [
                        4,
                        checkBannerDimensions(path)
                    ];
                case 1:
                    if (_state.sent()) {
                        throw new Error("Banner must be 1200px by 600px.");
                    }
                    return [
                        2
                    ];
            }
        });
    })();
};
var checkFeatureGraphicCompatibility = function(path) {
    return _async_to_generator(function() {
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    if (!fs.existsSync(path) || !checkImageExtension(path)) {
                        throw new Error("Please check the path to your featureGraphic image and ensure the file is a jpeg, png, or webp file.");
                    }
                    return [
                        4,
                        checkFeatureGraphicDimensions(path)
                    ];
                case 1:
                    if (_state.sent()) {
                        throw new Error("Feature Graphic must be 1200px by 1200px.");
                    }
                    return [
                        2
                    ];
            }
        });
    })();
};
var checkImageExtension = function(uri) {
    var fileExt = path.extname(uri).toLowerCase();
    return fileExt == ".png" || fileExt == ".jpg" || fileExt == ".jpeg" || fileExt == ".webp";
};
var checkVideoExtension = function(uri) {
    var fileExt = path.extname(uri).toLowerCase();
    return fileExt == ".mp4";
};
/**
 * We need to pre-check some things in the localized resources before we move forward
 */ var validateLocalizableResources = function(config) {
    if (!config.release.catalog["en-US"]) {
        throw new Error("Please ensure you have the en-US locale strings in your configuration file.");
    }
    var baselineSize = Object.keys(config.release.catalog["en-US"]).length;
    Object.keys(config.release.catalog).forEach(function(locale) {
        var size = Object.keys(config.release.catalog[locale]).length;
        if (size != baselineSize) {
            throw new Error("Please ensure you have included all localized strings for all locales in your configuration file.");
        }
    });
    var descsWrongLength = Object.values(config.release.catalog).map(function(x) {
        return x.short_description;
    }).filter(function(desc) {
        return !(desc === null || desc === void 0 ? void 0 : desc.length) || desc.length > 30;
    });
    if (descsWrongLength.length > 0) {
        throw new Error("Please ensure all translations of short_description are between 0 and 30 characters");
    }
};
var checkIconDimensions = function(iconPath) {
    return _async_to_generator(function() {
        var size, _size_width;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        runImgSize(iconPath)
                    ];
                case 1:
                    size = _state.sent();
                    return [
                        2,
                        (size === null || size === void 0 ? void 0 : size.width) != (size === null || size === void 0 ? void 0 : size.height) || ((_size_width = size === null || size === void 0 ? void 0 : size.width) !== null && _size_width !== void 0 ? _size_width : 0) != 512
                    ];
            }
        });
    })();
};
var checkScreenshotDimensions = function(imagePath) {
    return _async_to_generator(function() {
        var size, _size_width, _size_height;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        runImgSize(imagePath)
                    ];
                case 1:
                    size = _state.sent();
                    return [
                        2,
                        ((_size_width = size === null || size === void 0 ? void 0 : size.width) !== null && _size_width !== void 0 ? _size_width : 0) < 1080 || ((_size_height = size === null || size === void 0 ? void 0 : size.height) !== null && _size_height !== void 0 ? _size_height : 0) < 1080
                    ];
            }
        });
    })();
};
var checkBannerDimensions = function(imagePath) {
    return _async_to_generator(function() {
        var size, _size_width, _size_height;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        runImgSize(imagePath)
                    ];
                case 1:
                    size = _state.sent();
                    return [
                        2,
                        ((_size_width = size === null || size === void 0 ? void 0 : size.width) !== null && _size_width !== void 0 ? _size_width : 0) != 1200 || ((_size_height = size === null || size === void 0 ? void 0 : size.height) !== null && _size_height !== void 0 ? _size_height : 0) != 600
                    ];
            }
        });
    })();
};
var checkFeatureGraphicDimensions = function(imagePath) {
    return _async_to_generator(function() {
        var size, _size_width, _size_height;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        runImgSize(imagePath)
                    ];
                case 1:
                    size = _state.sent();
                    return [
                        2,
                        ((_size_width = size === null || size === void 0 ? void 0 : size.width) !== null && _size_width !== void 0 ? _size_width : 0) != 1200 || ((_size_height = size === null || size === void 0 ? void 0 : size.height) !== null && _size_height !== void 0 ? _size_height : 0) != 1200
                    ];
            }
        });
    })();
};
var checkVideoDimensions = function(imagePath) {
    return _async_to_generator(function() {
        var size, _size_width, _size_height;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        getVideoDimensions(imagePath)
                    ];
                case 1:
                    size = _state.sent();
                    return [
                        2,
                        ((_size_width = size === null || size === void 0 ? void 0 : size.width) !== null && _size_width !== void 0 ? _size_width : 0) < 720 || ((_size_height = size === null || size === void 0 ? void 0 : size.height) !== null && _size_height !== void 0 ? _size_height : 0) < 720
                    ];
            }
        });
    })();
};
var getAndroidDetails = function(aaptDir, apkPath) {
    return _async_to_generator(function() {
        var stdout, appPackage, versionCode, versionName, minSdk, permissions, locales, isDebuggable, _locales_values, localeArray, localesSrc, _appPackage_, _minSdk_, _versionCode_, _versionName_, _tmp, e;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _state.trys.push([
                        0,
                        3,
                        ,
                        4
                    ]);
                    return [
                        4,
                        runExec("".concat(aaptDir, '/aapt2 dump badging "').concat(apkPath, '"'))
                    ];
                case 1:
                    stdout = _state.sent().stdout;
                    appPackage = new RegExp(AaptPrefixes.packagePrefix + AaptPrefixes.quoteRegex).exec(stdout);
                    versionCode = new RegExp(AaptPrefixes.verCodePrefix + AaptPrefixes.quoteRegex).exec(stdout);
                    versionName = new RegExp(AaptPrefixes.verNamePrefix + AaptPrefixes.quoteRegex).exec(stdout);
                    minSdk = new RegExp(AaptPrefixes.sdkPrefix + AaptPrefixes.quoteRegex).exec(stdout);
                    permissions = _to_consumable_array(stdout.matchAll(/(?:uses-permission|uses-permission-sdk-23): name='([^']*)'/g)).flatMap(function(permission) {
                        return permission[1];
                    });
                    locales = new RegExp(AaptPrefixes.localePrefix + AaptPrefixes.quoteNonLazyRegex).exec(stdout);
                    isDebuggable = new RegExp(AaptPrefixes.debuggableApkPrefix).exec(stdout);
                    if (isDebuggable != null) {
                        throw new TypeError("Debug apks are not supported on Solana dApp store.\nSubmit a signed release apk");
                    }
                    localeArray = Array.from((_locales_values = locales === null || locales === void 0 ? void 0 : locales.values()) !== null && _locales_values !== void 0 ? _locales_values : []);
                    if (localeArray.length == 2) {
                        localesSrc = localeArray[1];
                        localeArray = [
                            "en-US"
                        ].concat(localesSrc.split("' '").slice(1));
                    }
                    if (permissions.includes("android.permission.INSTALL_PACKAGES") || permissions.includes("android.permission.DELETE_PACKAGES")) {
                        showMessage("App requests system app install/delete permission", "Your app requests system install/delete permission which is managed by Solana dApp Store.\nThis app will be not approved for listing on Solana dApp Store.", "error");
                    }
                    if (permissions.includes("android.permission.REQUEST_INSTALL_PACKAGES") || permissions.includes("android.permission.REQUEST_DELETE_PACKAGES")) {
                        showMessage("App requests install or delete permission", "App will be subject to additional security reviews for listing on Solana dApp Store and processing time may be beyond regular review time", "warning");
                    }
                    if (permissions.includes("com.solanamobile.seedvault.ACCESS_SEED_VAULT") || permissions.includes("com.solanamobile.seedvault.ACCESS_SEED_VAULT_PRIVILEGED")) {
                        showMessage("App requests Seed Vault permission", "If this is not a wallet application, your app maybe rejected from listing on Solana dApp Store.", "warning");
                    }
                    _tmp = {
                        android_package: (_appPackage_ = appPackage === null || appPackage === void 0 ? void 0 : appPackage[1]) !== null && _appPackage_ !== void 0 ? _appPackage_ : "",
                        min_sdk: parseInt((_minSdk_ = minSdk === null || minSdk === void 0 ? void 0 : minSdk[1]) !== null && _minSdk_ !== void 0 ? _minSdk_ : "0", 10),
                        version_code: parseInt((_versionCode_ = versionCode === null || versionCode === void 0 ? void 0 : versionCode[1]) !== null && _versionCode_ !== void 0 ? _versionCode_ : "0", 10),
                        version: (_versionName_ = versionName === null || versionName === void 0 ? void 0 : versionName[1]) !== null && _versionName_ !== void 0 ? _versionName_ : "0"
                    };
                    return [
                        4,
                        extractCertFingerprint(aaptDir, apkPath)
                    ];
                case 2:
                    return [
                        2,
                        (_tmp.cert_fingerprint = _state.sent(), _tmp.permissions = permissions, _tmp.locales = localeArray, _tmp)
                    ];
                case 3:
                    e = _state.sent();
                    if (_instanceof(e, TypeError)) {
                        throw e;
                    } else {
                        throw new Error("There was an error parsing your APK. Please ensure you have installed Java and provided a valid Android tools directory containing AAPT2.\n" + e);
                    }
                    return [
                        3,
                        4
                    ];
                case 4:
                    return [
                        2
                    ];
            }
        });
    })();
};
export var extractCertFingerprint = function(aaptDir, apkPath) {
    return _async_to_generator(function() {
        var stdout, regex, match;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        runExec("".concat(aaptDir, '/apksigner verify --print-certs -v "').concat(apkPath, '"'))
                    ];
                case 1:
                    stdout = _state.sent().stdout;
                    regex = /Signer #1 certificate SHA-256 digest:\s*([a-fA-F0-9]+)/;
                    match = stdout.match(regex);
                    if (match && match[1]) {
                        return [
                            2,
                            match[1]
                        ];
                    } else {
                        throw new Error("Could not obtain cert fingerprint");
                    }
                    return [
                        2
                    ];
            }
        });
    })();
};
export var writeToPublishDetails = function(param) {
    var app = param.app, release = param.release, lastSubmittedVersionOnChain = param.lastSubmittedVersionOnChain, lastUpdatedVersionOnStore = param.lastUpdatedVersionOnStore;
    return _async_to_generator(function() {
        var currentConfig, _app_address, _release_address, newConfig;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        loadPublishDetailsWithChecks()
                    ];
                case 1:
                    currentConfig = _state.sent();
                    delete currentConfig.publisher.icon;
                    delete currentConfig.app.icon;
                    newConfig = {
                        publisher: _object_spread({}, currentConfig.publisher),
                        app: _object_spread_props(_object_spread({}, currentConfig.app), {
                            address: (_app_address = app === null || app === void 0 ? void 0 : app.address) !== null && _app_address !== void 0 ? _app_address : currentConfig.app.address
                        }),
                        release: _object_spread_props(_object_spread({}, currentConfig.release), {
                            address: (_release_address = release === null || release === void 0 ? void 0 : release.address) !== null && _release_address !== void 0 ? _release_address : currentConfig.release.address
                        }),
                        solana_mobile_dapp_publisher_portal: currentConfig.solana_mobile_dapp_publisher_portal,
                        lastSubmittedVersionOnChain: lastSubmittedVersionOnChain !== null && lastSubmittedVersionOnChain !== void 0 ? lastSubmittedVersionOnChain : currentConfig.lastSubmittedVersionOnChain,
                        lastUpdatedVersionOnStore: lastUpdatedVersionOnStore !== null && lastUpdatedVersionOnStore !== void 0 ? lastUpdatedVersionOnStore : currentConfig.lastUpdatedVersionOnStore
                    };
                    fs.writeFileSync(Constants.getConfigFilePath(), dump(newConfig, {
                        lineWidth: -1
                    }));
                    return [
                        2
                    ];
            }
        });
    })();
};
