function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _ts_generator(thisArg, body) {
    var f, y, t, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(g && (g = 0, op[0] && (_ = 0)), _)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
import fs from "fs";
import { Keypair, PublicKey } from "@solana/web3.js";
import debugModule from "debug";
import { IrysStorageDriver, keypairIdentity, Metaplex } from "@metaplex-foundation/js";
import updateNotifier from "update-notifier";
import { readFile } from 'fs/promises';
var cliPackage = JSON.parse((await readFile(new URL("./package.json", import.meta.url))).toString());
import boxen from "boxen";
import ver from "semver";
import { CachedStorageDriver } from "./upload/CachedStorageDriver.js";
import { EnvVariables } from "./config/index.js";
import { S3Client } from "@aws-sdk/client-s3";
import { awsStorage } from "@metaplex-foundation/js-plugin-aws";
import { S3StorageManager } from "./config/index.js";
export var Constants = function Constants() {
    "use strict";
    _class_call_check(this, Constants);
};
_define_property(Constants, "CLI_VERSION", "0.11.0");
_define_property(Constants, "CONFIG_FILE_NAME", "config.yaml");
_define_property(Constants, "DEFAULT_RPC_DEVNET", "https://api.devnet.solana.com");
_define_property(Constants, "DEFAULT_PRIORITY_FEE", 500000);
_define_property(Constants, "getConfigFilePath", function() {
    return "".concat(process.cwd(), "/").concat(Constants.CONFIG_FILE_NAME);
});
export var debug = debugModule("CLI");
export var checkForSelfUpdate = function() {
    return _async_to_generator(function() {
        var notifier, updateInfo, latestVer, currentVer;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    notifier = updateNotifier({
                        pkg: cliPackage
                    });
                    return [
                        4,
                        notifier.fetchInfo()
                    ];
                case 1:
                    updateInfo = _state.sent();
                    latestVer = new ver.SemVer(updateInfo.latest);
                    currentVer = new ver.SemVer(updateInfo.current);
                    if (latestVer.major > currentVer.major || latestVer.minor > currentVer.minor) {
                        throw new Error("Please update to the latest version of the dApp Store CLI before proceeding.\nCurrent version is ".concat(currentVer.raw, "\nLatest version is ").concat(latestVer.raw));
                    }
                    return [
                        2
                    ];
            }
        });
    })();
};
export var checkMintedStatus = function(conn, appAddr, releaseAddr) {
    return _async_to_generator(function() {
        var i, _results_, _results_1, results, isAppMinted, isReleaseMinted, errorMessage;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    i = 0;
                    _state.label = 1;
                case 1:
                    if (!(i < 5)) return [
                        3,
                        4
                    ];
                    return [
                        4,
                        conn.getMultipleAccountsInfo([
                            new PublicKey(appAddr),
                            new PublicKey(releaseAddr)
                        ])
                    ];
                case 2:
                    results = _state.sent();
                    isAppMinted = results[0] != undefined && ((_results_ = results[0]) === null || _results_ === void 0 ? void 0 : _results_.lamports) > 0;
                    isReleaseMinted = results[1] != undefined && ((_results_1 = results[1]) === null || _results_1 === void 0 ? void 0 : _results_1.lamports) > 0;
                    if (isAppMinted && isReleaseMinted) {
                        return [
                            2
                        ];
                    } else {
                        errorMessage = "";
                        if (!isAppMinted) {
                            errorMessage = errorMessage + "App NFT fetch at address ".concat(appAddr, " failed.\n");
                        }
                        if (!isReleaseMinted) {
                            errorMessage = errorMessage + "Release NFT fetch at address ".concat(releaseAddr, " failed.\n");
                        }
                        if (i == 4) {
                            throw new Error("Expected App :: ".concat(appAddr, " and Release :: ").concat(releaseAddr, " to be minted before submission.\n\n          but ").concat(errorMessage, "\n\n          Please ensure you have minted all of your NFTs before submitting to the Solana Mobile dApp publisher portal."));
                        } else {
                            sleep(2000);
                        }
                    }
                    _state.label = 3;
                case 3:
                    i++;
                    return [
                        3,
                        1
                    ];
                case 4:
                    return [
                        2
                    ];
            }
        });
    })();
};
export var sleep = function(ms) {
    return new Promise(function(resolve) {
        return setTimeout(resolve, ms);
    });
};
export var parseKeypair = function(pathToKeypairFile) {
    try {
        var keypairFile = fs.readFileSync(pathToKeypairFile, "utf-8");
        return Keypair.fromSecretKey(Buffer.from(JSON.parse(keypairFile)));
    } catch (e) {
        showMessage("KeyPair Error", "Something went wrong when attempting to retrieve the keypair at " + pathToKeypairFile, "error");
    }
};
export var isDevnet = function(rpcUrl) {
    return rpcUrl.indexOf("devnet") != -1;
};
export var isTestnet = function(rpcUrl) {
    return rpcUrl.indexOf("testnet") != -1;
};
export var checkSubmissionNetwork = function(rpcUrl) {
    if (isDevnet(rpcUrl) || isTestnet(rpcUrl)) {
        throw new Error("It looks like you are attempting to submit a request with a devnet or testnet RPC endpoint. Please ensure that your NFTs are minted on mainnet beta, and re-run with a mainnet beta RPC endpoint.");
    }
};
export var generateNetworkSuffix = function(rpcUrl) {
    var suffix = "";
    if (isDevnet(rpcUrl)) {
        suffix = "?cluster=devnet";
    } else if (isTestnet(rpcUrl)) {
        suffix = "?cluster=testnet";
    } else {
        suffix = "?cluster=mainnet";
    }
    return suffix;
};
export var dryRunSuccessMessage = function() {
    showMessage("Dry run", "Dry run was successful", "standard");
};
export var alphaAppSubmissionMessage = function() {
    showMessage("Alpha release", "Alpha releases are not reviewed on dApp store and are meant for internal testing only.\n" + "Run the `npx dapp-store publish submit ...` command again without the `--alpha` param to publish the app", "warning");
};
export var showNetworkWarningIfApplicable = function(rpcUrl) {
    if (isDevnet(rpcUrl)) {
        showMessage("Devnet Mode", "Running on Devnet", "warning");
    } else if (isTestnet(rpcUrl)) {
        showMessage("Testnet Mode", "Running on Testnet", "warning");
    }
};
export var showMessage = function() {
    var titleMessage = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "", contentMessage = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "", type = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "standard";
    var color = "cyan";
    if (type == "error") {
        color = "redBright";
    } else if (type == "warning") {
        color = "yellow";
    }
    var msg = boxen(contentMessage, {
        title: titleMessage,
        padding: 1,
        margin: 1,
        borderStyle: "single",
        borderColor: color,
        textAlignment: "left",
        titleAlignment: "center"
    });
    console.log(msg);
    return msg;
};
export var getMetaplexInstance = function(connection, keypair) {
    var storageParams = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "";
    var metaplex = Metaplex.make(connection).use(keypairIdentity(keypair));
    var isDevnet = connection.rpcEndpoint.includes("devnet");
    //TODO: Use DI for this
    var s3Mgr = new S3StorageManager(new EnvVariables());
    s3Mgr.parseCmdArg(storageParams);
    if (s3Mgr.hasS3Config) {
        var awsClient = new S3Client({
            region: s3Mgr.s3Config.regionName,
            credentials: {
                accessKeyId: s3Mgr.s3Config.accessKey,
                secretAccessKey: s3Mgr.s3Config.secretKey
            }
        });
        var bucketPlugin = awsStorage(awsClient, s3Mgr.s3Config.bucketName);
        metaplex.use(bucketPlugin);
    } else {
        var irysStorageDriver = isDevnet ? new IrysStorageDriver(metaplex, {
            address: "https://turbo.ardrive.dev",
            providerUrl: Constants.DEFAULT_RPC_DEVNET
        }) : new IrysStorageDriver(metaplex, {
            address: "https://turbo.ardrive.io"
        });
        metaplex.storage().setDriver(irysStorageDriver);
    }
    metaplex.storage().setDriver(new CachedStorageDriver(metaplex.storage().driver(), {
        assetManifestPath: isDevnet ? "./.asset-manifest-devnet.json" : "./.asset-manifest.json"
    }));
    return metaplex;
};
