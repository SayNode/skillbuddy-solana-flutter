// This file has been automatically generated by Flutter Architect.
//
// Flutter Architect is a tool that generates boilerplate code for your Flutter projects.
// Flutter Architect was created at SayNode Operations AG by Yann Marti, Francesco Romeo and Pedro Gon√ßalves.
//
// https://saynode.ch
import 'package:firebase_app_check/firebase_app_check.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_crashlytics/firebase_crashlytics.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter_branch_sdk/flutter_branch_sdk.dart';
import 'package:get/get.dart';

import '../service/storage/storage_service.dart';
import 'base/main_base.dart';
import 'firebase_options.dart';
import 'service/auth_service.dart';
import 'service/localization_controller.dart';
import 'service/messaging_service.dart';
import 'util/constants.dart';
import 'util/util.dart';

void main() {
  Main().main();
}

class Main extends MainBase {
  @override
  Future<void> initializeServices() async {
    Get.log('Initializing services...');
    // Initialize services:
    await Get.find<StorageService>().init();
    await Get.find<LocalizationController>().init();
    Get.find<AuthService>().init();
    await super.initializeServices();
  }

  @override
  Future<void> beforeRunApp() async {
    // Before Run App:
    // Initalize Firebase
    if (Firebase.apps.isEmpty) {
      await Firebase.initializeApp(
        name: 'skillbuddy',
        options: DefaultFirebaseOptions.currentPlatform,
      );
    }
    if (kReleaseMode) {
      await FirebaseAppCheck.instance.activate(
        appleProvider: AppleProvider.appAttestWithDeviceCheckFallback,
      );
    }

    await Get.find<MessagingService>().init();

    try {
      await FlutterBranchSdk.init();
    } catch (e) {
      SkillBuddyConstants.logger.log('Branch SDK Error: $e', error: e);
    }

    await super.beforeRunApp();
  }

  @override
  Future<void> onRunZonedGuarded(WidgetsBinding widgetsBinding) async {
    // On Run Zoned Guarded:
    if (isFirstRun) {
      await Get.find<StorageService>().secure.deleteAll();
    }
    await super.onRunZonedGuarded(widgetsBinding);
  }

  @override
  Future<void> handleError(
    Object error,
    StackTrace? stack, {
    bool fatal = false,
    Iterable<Object> information = const <Object>[],
    bool async = false,
  }) async {
    // Handle Error:
    await FirebaseCrashlytics.instance.recordError(
      error,
      stack,
      reason:
          'This is a ${fatal ? "fatal" : "non-fatal"} error in ${SkillBuddyConstants.devMode ? "Development" : "Production"}.',
      fatal: fatal,
      information: <Object>[
        'Current Route: ${Get.currentRoute}',
        'Previous Route: ${Get.previousRoute}',
        'Asynchronous: $async',
        'Production: ${!SkillBuddyConstants.devMode}',
        'GetMaterialApp Called: $getMaterialAppCalled',
        ...information,
      ],
    );
    await super.handleError(
      error,
      stack,
      fatal: fatal,
      information: information,
      async: async,
    );
  }
}
